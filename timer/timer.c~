#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/kmod.h>
#include <linux/slab.h>
#include <linux/timer.h>
#include <linux/jiffies.h>
#include <asm/param.h>

MODULE_LICENSE("Dual BSD/GPL");

struct timer_list exp_timer;
int delay = 5;

void do_something(unsigned long data)
{
	printk("your timer expired and func has been called\n");

	//comment the following code, if you need one shot timer.
	// If not you will get periodic timer
	init_timer(&exp_timer);
	exp_timer.expires = jiffies + delay * HZ;	
	exp_timer.data = 0;			
	exp_timer.function = do_something;	
	add_timer(&exp_timer);			// Start timer
}

int timerTest_init(void)
{	
	printk("Timer Modules Init Called\n");
	init_timer(&exp_timer);
	exp_timer.expires = jiffies + delay * HZ;	// Timeout in no.of seconds
	exp_timer.data = 0;			//parameter to be passed to function
	exp_timer.function = do_something;	// Function to execute after n seconds
	add_timer(&exp_timer);			// Start timer
	return 0;
}

void timerTest_exit(void)
{
	del_timer(&exp_timer);
	printk("Exit called\n");
}

module_init(timerTest_init);
module_exit(timerTest_exit);


